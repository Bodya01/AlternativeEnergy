// <auto-generated />
using System;
using AlternativeEnergy.Pollutants.Infrastructure.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlternativeEnergy.Pollutants.Infrastructure.EF.Migrations
{
    [DbContext(typeof(PollutantsModuleContext))]
    [Migration("20241015231523_AddedSources")]
    partial class AddedSources
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pollutants")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Carbon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("EmissionsPerUnit")
                        .HasColumnType("real");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("CarbonEmissions", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Regions", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("CO2Emissions")
                        .HasColumnType("real");

                    b.Property<string>("EnergyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sources", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("CarbonPerUnit")
                        .HasColumnType("real");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transport", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.TransportEmission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ConsumedFuel")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.HasIndex("TransportId1");

                    b.ToTable("TransportEmissions", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Waste", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Produced")
                        .HasColumnType("real");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WasteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Wastes", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Water", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConsumptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Used")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("WaterEmissions", "pollutants");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Carbon", b =>
                {
                    b.HasOne("AlternativeEnergy.Pollutants.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.TransportEmission", b =>
                {
                    b.HasOne("AlternativeEnergy.Pollutants.Domain.Entities.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlternativeEnergy.Pollutants.Domain.Entities.Transport", null)
                        .WithMany("Emissions")
                        .HasForeignKey("TransportId1");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Waste", b =>
                {
                    b.HasOne("AlternativeEnergy.Pollutants.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Water", b =>
                {
                    b.HasOne("AlternativeEnergy.Pollutants.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AlternativeEnergy.Pollutants.Domain.Entities.Transport", b =>
                {
                    b.Navigation("Emissions");
                });
#pragma warning restore 612, 618
        }
    }
}
